module ISDU (   input logic Clk, 
									Reset,
									Run,
									Continue,
									
				input logic[1:0]    Opcode, 
				);

	enum logic [4:0] {  Halted, //it needs to be 5 bits not four, 
						PauseIR1, 
						PauseIR2, 
						S_18, //First State
						S_33_1, //Load M to MDR
						S_33_2, 
						S_33_3,
						S_33_4,
						S_35, // MDR into IR
						S_32, // load Ben 
						S_01, //Add
						S_05, //And
					   S_09, //NOT
					   S_00, //BEN 1
						S_22, //Ben 2
					   S_12, //JMP
					   S_04, //JSR1
						S_21, //JSR2
					   S_06, //LDR1`
						S_25_1, //LDR2
						S_25_2,
						S_25_3,
						S_25_4,
						S_27, 
					   S_07, //STR
						S_23, 
						S_16_1, //STR 16
						S_16_2, 
						S_16_3,
						S_16_4
						
						}   State, Next_state;   // Internal state logic
		
	always_ff @ (posedge Clk)
	begin
		if (Reset) 
			State <= Halted;
		else 
			State <= Next_state;
	end
   
	always_comb
	begin 
		// Default next state is staying at current state
		Next_state = State;

	
		// Assign next state
		unique case (State)
			Halted : 
				if (Run) 
					Next_state = S_18;                      
			S_18 : 
				Next_state = S_33_1;
			S_33_1 : 
				Next_state = S_33_2;
			S_33_2 :
				Next_state = S_33_3; 
			S_33_3 : 
				Next_state = S_35;
			S_35 : 
				Next_state = S_32;     // MAKE THIS S_32 FOR 5.2 [DONE]

			PauseIR1 : // else state will not register 1
				begin
				if (~Continue) 
					Next_state = PauseIR1;
				else 
					Next_state = PauseIR2;
				end
				
			PauseIR2 : 
				begin
				if (Continue) 
					Next_state = PauseIR2;
				else 
					Next_state = S_18;
				end
				
			S_32 : 
				case (Opcode)
					4'b0001 : 
						Next_state = S_01;	//Add 
					4'b0101	:					
						Next_state = S_05;	//AND
					4'b1001 : 
						Next_state = S_09;	//NOT
					4'b1101 : 
						begin
						Next_state = PauseIR1;    // pause
						end
					default : 
						Next_state = S_18;
				endcase
			S_01 : 
				Next_state = S_18;
			S_02 : 
				Next_state = S_18;
			default : 
				Next_state = S_18;

		endcase
		
		case (State) // what is happening in each of the states 
			Halted:; //LD_LED = 1'b1;
			S_01 : 
				begin 
				// Put something here 
				end
			S_02 : 
				// Put something here 
			S_03 : 
				begin 
				// Put something here
				end
			default : ;
		endcase
	end 

	
endmodule
