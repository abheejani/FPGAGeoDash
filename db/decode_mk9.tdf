--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="MAX 10" LPM_DECODES=20 LPM_WIDTH=5 data eq
--VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_compare 2018:09:12:13:04:24:SJ cbx_lpm_decode 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.



--synthesis_resources = lut 36 
SUBDESIGN decode_mk9
( 
	data[4..0]	:	input;
	eq[19..0]	:	output;
) 
VARIABLE 
	data_wire[4..0]	: WIRE;
	eq_node[19..0]	: WIRE;
	eq_wire[31..0]	: WIRE;
	w_anode368w[2..0]	: WIRE;
	w_anode382w[3..0]	: WIRE;
	w_anode399w[3..0]	: WIRE;
	w_anode409w[3..0]	: WIRE;
	w_anode419w[3..0]	: WIRE;
	w_anode429w[3..0]	: WIRE;
	w_anode439w[3..0]	: WIRE;
	w_anode449w[3..0]	: WIRE;
	w_anode459w[3..0]	: WIRE;
	w_anode471w[2..0]	: WIRE;
	w_anode481w[3..0]	: WIRE;
	w_anode492w[3..0]	: WIRE;
	w_anode502w[3..0]	: WIRE;
	w_anode512w[3..0]	: WIRE;
	w_anode522w[3..0]	: WIRE;
	w_anode532w[3..0]	: WIRE;
	w_anode542w[3..0]	: WIRE;
	w_anode552w[3..0]	: WIRE;
	w_anode563w[2..0]	: WIRE;
	w_anode573w[3..0]	: WIRE;
	w_anode584w[3..0]	: WIRE;
	w_anode594w[3..0]	: WIRE;
	w_anode604w[3..0]	: WIRE;
	w_anode614w[3..0]	: WIRE;
	w_anode624w[3..0]	: WIRE;
	w_anode634w[3..0]	: WIRE;
	w_anode644w[3..0]	: WIRE;
	w_anode655w[2..0]	: WIRE;
	w_anode665w[3..0]	: WIRE;
	w_anode676w[3..0]	: WIRE;
	w_anode686w[3..0]	: WIRE;
	w_anode696w[3..0]	: WIRE;
	w_anode706w[3..0]	: WIRE;
	w_anode716w[3..0]	: WIRE;
	w_anode726w[3..0]	: WIRE;
	w_anode736w[3..0]	: WIRE;
	w_data366w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	eq[] = eq_node[];
	eq_node[19..0] = eq_wire[19..0];
	eq_wire[] = ( ( w_anode736w[3..3], w_anode726w[3..3], w_anode716w[3..3], w_anode706w[3..3], w_anode696w[3..3], w_anode686w[3..3], w_anode676w[3..3], w_anode665w[3..3]), ( w_anode644w[3..3], w_anode634w[3..3], w_anode624w[3..3], w_anode614w[3..3], w_anode604w[3..3], w_anode594w[3..3], w_anode584w[3..3], w_anode573w[3..3]), ( w_anode552w[3..3], w_anode542w[3..3], w_anode532w[3..3], w_anode522w[3..3], w_anode512w[3..3], w_anode502w[3..3], w_anode492w[3..3], w_anode481w[3..3]), ( w_anode459w[3..3], w_anode449w[3..3], w_anode439w[3..3], w_anode429w[3..3], w_anode419w[3..3], w_anode409w[3..3], w_anode399w[3..3], w_anode382w[3..3]));
	w_anode368w[] = ( (w_anode368w[1..1] & (! data_wire[4..4])), (w_anode368w[0..0] & (! data_wire[3..3])), B"1");
	w_anode382w[] = ( (w_anode382w[2..2] & (! w_data366w[2..2])), (w_anode382w[1..1] & (! w_data366w[1..1])), (w_anode382w[0..0] & (! w_data366w[0..0])), w_anode368w[2..2]);
	w_anode399w[] = ( (w_anode399w[2..2] & (! w_data366w[2..2])), (w_anode399w[1..1] & (! w_data366w[1..1])), (w_anode399w[0..0] & w_data366w[0..0]), w_anode368w[2..2]);
	w_anode409w[] = ( (w_anode409w[2..2] & (! w_data366w[2..2])), (w_anode409w[1..1] & w_data366w[1..1]), (w_anode409w[0..0] & (! w_data366w[0..0])), w_anode368w[2..2]);
	w_anode419w[] = ( (w_anode419w[2..2] & (! w_data366w[2..2])), (w_anode419w[1..1] & w_data366w[1..1]), (w_anode419w[0..0] & w_data366w[0..0]), w_anode368w[2..2]);
	w_anode429w[] = ( (w_anode429w[2..2] & w_data366w[2..2]), (w_anode429w[1..1] & (! w_data366w[1..1])), (w_anode429w[0..0] & (! w_data366w[0..0])), w_anode368w[2..2]);
	w_anode439w[] = ( (w_anode439w[2..2] & w_data366w[2..2]), (w_anode439w[1..1] & (! w_data366w[1..1])), (w_anode439w[0..0] & w_data366w[0..0]), w_anode368w[2..2]);
	w_anode449w[] = ( (w_anode449w[2..2] & w_data366w[2..2]), (w_anode449w[1..1] & w_data366w[1..1]), (w_anode449w[0..0] & (! w_data366w[0..0])), w_anode368w[2..2]);
	w_anode459w[] = ( (w_anode459w[2..2] & w_data366w[2..2]), (w_anode459w[1..1] & w_data366w[1..1]), (w_anode459w[0..0] & w_data366w[0..0]), w_anode368w[2..2]);
	w_anode471w[] = ( (w_anode471w[1..1] & (! data_wire[4..4])), (w_anode471w[0..0] & data_wire[3..3]), B"1");
	w_anode481w[] = ( (w_anode481w[2..2] & (! w_data366w[2..2])), (w_anode481w[1..1] & (! w_data366w[1..1])), (w_anode481w[0..0] & (! w_data366w[0..0])), w_anode471w[2..2]);
	w_anode492w[] = ( (w_anode492w[2..2] & (! w_data366w[2..2])), (w_anode492w[1..1] & (! w_data366w[1..1])), (w_anode492w[0..0] & w_data366w[0..0]), w_anode471w[2..2]);
	w_anode502w[] = ( (w_anode502w[2..2] & (! w_data366w[2..2])), (w_anode502w[1..1] & w_data366w[1..1]), (w_anode502w[0..0] & (! w_data366w[0..0])), w_anode471w[2..2]);
	w_anode512w[] = ( (w_anode512w[2..2] & (! w_data366w[2..2])), (w_anode512w[1..1] & w_data366w[1..1]), (w_anode512w[0..0] & w_data366w[0..0]), w_anode471w[2..2]);
	w_anode522w[] = ( (w_anode522w[2..2] & w_data366w[2..2]), (w_anode522w[1..1] & (! w_data366w[1..1])), (w_anode522w[0..0] & (! w_data366w[0..0])), w_anode471w[2..2]);
	w_anode532w[] = ( (w_anode532w[2..2] & w_data366w[2..2]), (w_anode532w[1..1] & (! w_data366w[1..1])), (w_anode532w[0..0] & w_data366w[0..0]), w_anode471w[2..2]);
	w_anode542w[] = ( (w_anode542w[2..2] & w_data366w[2..2]), (w_anode542w[1..1] & w_data366w[1..1]), (w_anode542w[0..0] & (! w_data366w[0..0])), w_anode471w[2..2]);
	w_anode552w[] = ( (w_anode552w[2..2] & w_data366w[2..2]), (w_anode552w[1..1] & w_data366w[1..1]), (w_anode552w[0..0] & w_data366w[0..0]), w_anode471w[2..2]);
	w_anode563w[] = ( (w_anode563w[1..1] & data_wire[4..4]), (w_anode563w[0..0] & (! data_wire[3..3])), B"1");
	w_anode573w[] = ( (w_anode573w[2..2] & (! w_data366w[2..2])), (w_anode573w[1..1] & (! w_data366w[1..1])), (w_anode573w[0..0] & (! w_data366w[0..0])), w_anode563w[2..2]);
	w_anode584w[] = ( (w_anode584w[2..2] & (! w_data366w[2..2])), (w_anode584w[1..1] & (! w_data366w[1..1])), (w_anode584w[0..0] & w_data366w[0..0]), w_anode563w[2..2]);
	w_anode594w[] = ( (w_anode594w[2..2] & (! w_data366w[2..2])), (w_anode594w[1..1] & w_data366w[1..1]), (w_anode594w[0..0] & (! w_data366w[0..0])), w_anode563w[2..2]);
	w_anode604w[] = ( (w_anode604w[2..2] & (! w_data366w[2..2])), (w_anode604w[1..1] & w_data366w[1..1]), (w_anode604w[0..0] & w_data366w[0..0]), w_anode563w[2..2]);
	w_anode614w[] = ( (w_anode614w[2..2] & w_data366w[2..2]), (w_anode614w[1..1] & (! w_data366w[1..1])), (w_anode614w[0..0] & (! w_data366w[0..0])), w_anode563w[2..2]);
	w_anode624w[] = ( (w_anode624w[2..2] & w_data366w[2..2]), (w_anode624w[1..1] & (! w_data366w[1..1])), (w_anode624w[0..0] & w_data366w[0..0]), w_anode563w[2..2]);
	w_anode634w[] = ( (w_anode634w[2..2] & w_data366w[2..2]), (w_anode634w[1..1] & w_data366w[1..1]), (w_anode634w[0..0] & (! w_data366w[0..0])), w_anode563w[2..2]);
	w_anode644w[] = ( (w_anode644w[2..2] & w_data366w[2..2]), (w_anode644w[1..1] & w_data366w[1..1]), (w_anode644w[0..0] & w_data366w[0..0]), w_anode563w[2..2]);
	w_anode655w[] = ( (w_anode655w[1..1] & data_wire[4..4]), (w_anode655w[0..0] & data_wire[3..3]), B"1");
	w_anode665w[] = ( (w_anode665w[2..2] & (! w_data366w[2..2])), (w_anode665w[1..1] & (! w_data366w[1..1])), (w_anode665w[0..0] & (! w_data366w[0..0])), w_anode655w[2..2]);
	w_anode676w[] = ( (w_anode676w[2..2] & (! w_data366w[2..2])), (w_anode676w[1..1] & (! w_data366w[1..1])), (w_anode676w[0..0] & w_data366w[0..0]), w_anode655w[2..2]);
	w_anode686w[] = ( (w_anode686w[2..2] & (! w_data366w[2..2])), (w_anode686w[1..1] & w_data366w[1..1]), (w_anode686w[0..0] & (! w_data366w[0..0])), w_anode655w[2..2]);
	w_anode696w[] = ( (w_anode696w[2..2] & (! w_data366w[2..2])), (w_anode696w[1..1] & w_data366w[1..1]), (w_anode696w[0..0] & w_data366w[0..0]), w_anode655w[2..2]);
	w_anode706w[] = ( (w_anode706w[2..2] & w_data366w[2..2]), (w_anode706w[1..1] & (! w_data366w[1..1])), (w_anode706w[0..0] & (! w_data366w[0..0])), w_anode655w[2..2]);
	w_anode716w[] = ( (w_anode716w[2..2] & w_data366w[2..2]), (w_anode716w[1..1] & (! w_data366w[1..1])), (w_anode716w[0..0] & w_data366w[0..0]), w_anode655w[2..2]);
	w_anode726w[] = ( (w_anode726w[2..2] & w_data366w[2..2]), (w_anode726w[1..1] & w_data366w[1..1]), (w_anode726w[0..0] & (! w_data366w[0..0])), w_anode655w[2..2]);
	w_anode736w[] = ( (w_anode736w[2..2] & w_data366w[2..2]), (w_anode736w[1..1] & w_data366w[1..1]), (w_anode736w[0..0] & w_data366w[0..0]), w_anode655w[2..2]);
	w_data366w[2..0] = data_wire[2..0];
END;
--VALID FILE
